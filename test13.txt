program Main;

var a, b : integer := 16;
var c: bool := 0;
var str:String;
var d: integer := a;

Enum MyEnum begin
   mb := 2,
   mb2 := 1,
   mb3 := -10,
end;

Enum MyEnum2 begin
   xx := MyEnum.mb,
   mb
end;

var zzzz:Enum MyEnum2 := MyEnum2.mb;


procedure fibo(num:integer)->integer;
begin
   IF num == 1 || num == 0
      return num;
   return fibo(num-1) + fibo(num-2);
end;


procedure func(src:enum MyEnum2)->BOOL;
begin
   IF src == MyEnum2.xx && a > 0
      return True;
   return False;
end;

procedure func2(arg: BOOL)->BOOL;
begin
   IF arg == True
      return True;
   return False;
end;


procedure func3(arg: integer&)->integer&;
var A, B : integer := 550;
var C : bool := True;
begin
   arg  = 999;
   return arg;
end;


procedure func4(arg: enum MyEnum2&)->enum MyEnum2&;
var A, B : integer := 550;

begin
   return arg;
end;


var arr : integer[MyEnum2.xx][3*1+MyEnum2.xx];
var brr : integer[4];
var e1 : enum MyEnum2 := MyEnum2.xx;
begin { Main }
   a += 10;
   b = 1;
   var rrref:integer& <- a;

   WHILE func(MyEnum2.xx)
      a -= 3;
   str = "asdsfdf";

   b = fibo(4);
   c = func(MyEnum2.mb);
   arr[0][4] := 2;
   arr[0][1] := 15;
   arr[1][fibo(4)] := 1305;

   c = func2('x');

   a = func3(arr[0][0]);
   func3(arr[0][1]);
   func3(arr[0][2]);
   func3(arr[0][3]);
   func3(a);

   func3(a) := 5;
   func3(b) := 6;


   var e2 : enum MyEnum2& <- func4(e1);
   e2 = MyEnum2.mb;
   

end.  { Main }